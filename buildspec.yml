version: 0.2
env:
  variables:
    # ECS Configuration
    ECS_CLUSTER: "finplay-cluster"
    ECS_SERVICE: "finplay-backend-service"
    ECS_TASK_DEFINITION: "finplay-backend"
    # ECR Configuration
    ECR_REGISTRY: "061039764011.dkr.ecr.us-east-1.amazonaws.com"
    ECR_REPOSITORY: "finplay-main-app"
    # Application Database Configuration
    DB_URL: "jdbc:mysql://finplaydb-instance-1.c7a0imowi95o.us-east-1.rds.amazonaws.com:3306/finplaydb"
    DB_USERNAME: "finplay"
    COGNITO_USER_POOL_ID: "us-east-1_e4yKbIDkl"
    AWS_REGION: "us-east-1"
    JWT_URI: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_e4yKbIDkl/.well-known/jwks.json"
  secrets-manager:
    # Secure way to manage sensitive credentials
    DB_PASSWORD: "arn:aws:secretsmanager:region:account-id:secret:database-password"
    AWS_ACCESS_KEY_ID: "arn:aws:secretsmanager:region:account-id:secret:aws-access-key"
    AWS_SECRET_ACCESS_KEY: "arn:aws:secretsmanager:region:account-id:secret:aws-secret-key"
    COGNITO_CLIENT_ID: "arn:aws:secretsmanager:region:account-id:secret:client-id"
    COGNITO_CLIENT_SECRET: "arn:aws:secretsmanager:region:account-id:secret:client-secret"
phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - yum install -y jq
  pre_build:
    commands:
      - echo Preparing for build
      - mvn clean validate
  build:
    commands:
      - echo Building the application
      - |
        mvn package -DskipTests \
          -DDB_URL="$DB_URL" \
          -DDB_USERNAME="$DB_USERNAME" \
          -DDB_PASSWORD="$DB_PASSWORD" \
          -DAWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
          -DAWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
          -DAWS_REGION="$AWS_REGION" \
          -DCOGNITO_CLIENT_ID="$COGNITO_CLIENT_ID" \
          -DCOGNITO_CLIENT_SECRET="$DCOGNITO_CLIENT_SECRET" \
          -DCOGNITO_USER_POOL_ID="$COGNITO_USER_POOL_ID" \
          -DJWT_URI="$JWT_URI"
      - echo Building the Docker image
      - docker build -t $ECR_REPOSITORY:latest .
      - docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
  post_build:
    commands:
      - echo Build completed
      # Push image to ECR
      - echo Pushing image to ECR...
      - docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      # Create new task definition
      - echo Creating new task definition...
      - |
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition "$ECS_TASK_DEFINITION" \
          --region "$AWS_REGION")
        NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq '.taskDefinition' | jq '.containerDefinitions[0].image="'$ECR_REGISTRY'/'$ECR_REPOSITORY':latest"')
        # Remove fields that shouldn't be included
        NEW_TASK_DEFINITION=$(echo "$NEW_TASK_DEFINITION" | jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)')
        # Register new task definition and capture ARN
        NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
          --family "$ECS_TASK_DEFINITION" \
          --cli-input-json "$(echo "$NEW_TASK_DEFINITION")" \
          --region "$AWS_REGION" \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
      # Update ECS service
      - echo Updating ECS service...
      - |
        aws ecs update-service \
          --cluster "$ECS_CLUSTER" \
          --service "$ECS_SERVICE" \
          --task-definition "$NEW_TASK_DEFINITION_ARN" \
          --region "$AWS_REGION" \
          --force-new-deployment
artifacts:
  files:
    - target/main-app-0.0.1-SNAPSHOT.jar
    - Dockerfile
  discard-paths: yes
cache:
  paths:
    - '/root/.m2/**/*'